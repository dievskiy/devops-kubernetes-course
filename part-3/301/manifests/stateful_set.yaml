apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  namespace: my-project
spec:
  ports:
    - port: 6060
  clusterIP: None
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: pingpong-svc
  namespace: my-project
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 5555
      protocol: TCP
  selector:
    app: pingpong
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pingpong
  namespace: my-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pingpong
  template:
    metadata:
      labels:
        app: pingpong
    spec:
      containers:
        - name: pingpong-image
          imagePullPolicy: Always
          image: dievskiy/pingpong:v5
          envFrom:
            - secretRef:
                name: db-secret
          env:
            - name: HOST
              value: postgres-svc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: my-project
spec:
  serviceName: postgres-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: db-claim
      containers:
        - name: postgres-image
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: db-secret
          env:
            - name: POSTGRESQL_VOLUME_DIR
              value: "/postgresql"
            - name: PGDATA
              value: "/postgresql/data"
          image: postgres:14
          ports:
            - name: inet
              containerPort: 6060
          volumeMounts:
            - name: db
              subPath: postgres
              mountPath: /postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-claim
  namespace: my-project
spec:
  resources:
    requests:
      storage: 30Gi
  accessModes:
    - ReadWriteOnce
